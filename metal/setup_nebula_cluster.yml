---
- name: Enable unattended upgrades
  hosts: nebula
  become: true
  tasks:
    - name: Write unattend config
      copy:
        dest: "/etc/apt/apt.conf.d/51unattended-upgrades-custom"
        content: |
          Unattended-Upgrade::Allowed-Origins {
                  "${distro_id}:${distro_codename}";
                  "${distro_id}:${distro_codename}-security";
                  "${distro_id}ESMApps:${distro_codename}-apps-security";
                  "${distro_id}ESM:${distro_codename}-infra-security";
                  "${distro_id}:${distro_codename}-updates";
                  "Docker:${distro_codename}";
                  "Netdata:${distro_codename}";
          };
          Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";
          Unattended-Upgrade::Remove-New-Unused-Dependencies "true";
          Unattended-Upgrade::Remove-Unused-Dependencies "true";
          Unattended-Upgrade::Automatic-Reboot "true";
          Unattended-Upgrade::Automatic-Reboot-Time "06:00";

- name: Install docker
  hosts: nebula
  gather_facts: yes
  become: yes
  roles:
    - role: docker
      vars:
        swarm: true

- name: Initialize Docker Swarm on first manager
  hosts: nebula_managers[0] # Targets the first manager in the 'nebula_managers' group
  become: true
  tasks:
    - name: Check Docker Swarm status # Checks if the host is part of a Swarm
      ansible.builtin.shell: docker info --format '{{ "{{.Swarm.LocalNodeState}}" }}'
      register: docker_swarm_status
      changed_when: false

    - name: Initialize Docker Swarm # Initializes the Swarm if not already active
      ansible.builtin.shell:
        cmd: docker swarm init --advertise-addr {{ ansible_host }}
      when: "'inactive' in docker_swarm_status.stdout" # Conditional execution
      register: swarm_init
      changed_when: "'Swarm initialized' in swarm_init.stdout"

    - name: Retrieve Docker Swarm manager token # Gets token for joining as a manager
      ansible.builtin.shell: docker swarm join-token manager -q
      register: manager_token
      changed_when: false

    - name: Retrieve Docker Swarm worker token # Gets token for joining as a worker
      ansible.builtin.shell: docker swarm join-token worker -q
      register: worker_token
      changed_when: false

- name: Join remaining managers to Docker Swarm
  hosts: nebula_managers:!nebula_managers[0]
  become: true
  tasks:
    - name: Check Docker Swarm status before attempting to join
      ansible.builtin.shell: docker info --format '{{ "{{.Swarm.LocalNodeState}}" }}'
      register: docker_swarm_status
      changed_when: false

    - name: Join Swarm as manager
      ansible.builtin.shell:
        cmd: docker swarm join --token {{ hostvars[groups['nebula_managers'][0]]['manager_token'].stdout }} {{ hostvars[groups['nebula_managers'][0]]['ansible_host'] }}:2377
      when: hostvars[groups['nebula_managers'][0]]['manager_token'].stdout is defined and docker_swarm_status.stdout != "active"
      register: swarm_join
      changed_when: "'This node joined a swarm as a manager' in swarm_join.stdout"

    - name: Label Docker Swarm manager nodes # Applies a label to manager nodes for identification
      ansible.builtin.shell:
        cmd: docker node update --label-add manager=true {{ item }}
      loop: "{{ groups['nebula_managers'] }}"
      loop_control:
        loop_var: item
      when: swarm_join is changed
      changed_when: false

- name: Join workers to Docker Swarm
  hosts: nebula_workers # Targets the worker nodes in the Swarm
  become: true
  tasks:
    - name: Check if node is part of a swarm # Verifies if the node is already in a Swarm
      ansible.builtin.shell: docker info --format '{{ "{{.Swarm.LocalNodeState}}" }}'
      register: swarm_state
      changed_when: false

    - name: Join Swarm as worker if not already part of a swarm # Joins the Swarm as a worker
      ansible.builtin.shell:
        cmd: docker swarm join --token {{ hostvars[groups['nebula_managers'][0]]['worker_token'].stdout }} {{ hostvars[groups['nebula_managers'][0]]['ansible_host'] }}:2377
      when: swarm_state.stdout != 'active'
      register: swarm_join
      changed_when: "'This node joined a swarm as a worker' in swarm_join.stdout"
